/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package murmurhash.example;

import com.google.common.hash.HashCode;
import com.google.common.hash.Hashing;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

record User(String name, String id) {
}


public class App {

    private static final String FILENAME = "users_id_list.csv";
    private static final int TOTAL_USERS = 10000;

    private static List<User> generateNewUsers() {
        return IntStream.range(1, TOTAL_USERS)
                .boxed().sorted().map(
                        in -> new User("Name_" + in, UUID.randomUUID().toString())
                ).toList();
    }

    private static List<User> getUsersFromFile() {

        try {
            Path path = Paths.get(FILENAME);
            return Files.readAllLines(path).stream().map(line ->
                            new User(line.split(",")[0], line.split(",")[1]))
                    .toList();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static void writeToFile(List<User> input) {
        Path path = Paths.get(FILENAME);
        String bodyLines = input.stream()
                .map(
                        (user) -> user.name() + "," + user.id()
                )
                .collect(Collectors.joining("\n"));

        try {
            Files.writeString(path,  bodyLines, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    private static double calculatePercentage(String userId) {
        HashCode hashCode = Hashing.murmur3_32_fixed().hashBytes(userId.getBytes(Charset.forName("UTF8")));
        long hashedValueInLong = Integer.toUnsignedLong(hashCode.asInt());
        var percentual = hashedValueInLong / Math.pow(2, 32);
        return percentual;
    }


    public static void main(String[] args) {
        //descomente esta linha se quiser gerar um novo arquivo de usuários
        //writeToFile(generateNewUsers());
        List<User> users = getUsersFromFile();

        try {
            double percentualLimit = 0.10;
            int usersInFeature = 0;

            for (var user : users) {
                double percentual = calculatePercentage(user.id());
                System.out.println("Usuário: " + user.name() + " id: " + user.id() + " percentual: " + percentual);
                if (percentual <= percentualLimit) usersInFeature++;
            }
            System.out.println("Usuários que visualizarão a feature: " + usersInFeature);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
